/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IXcm {
  export type WeightStruct = { refTime: BigNumberish; proofSize: BigNumberish };

  export type WeightStructOutput = [refTime: bigint, proofSize: bigint] & {
    refTime: bigint;
    proofSize: bigint;
  };
}

export interface IXcmInterface extends Interface {
  getFunction(
    nameOrSignature: "execute" | "send" | "weighMessage",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [BytesLike, IXcm.WeightStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "weighMessage",
    values: [BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weighMessage",
    data: BytesLike,
  ): Result;
}

export interface IXcm extends BaseContract {
  connect(runner?: ContractRunner | null): IXcm;
  waitForDeployment(): Promise<this>;

  interface: IXcmInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  execute: TypedContractMethod<
    [message: BytesLike, weight: IXcm.WeightStruct],
    [void],
    "nonpayable"
  >;

  send: TypedContractMethod<
    [destination: BytesLike, message: BytesLike],
    [void],
    "nonpayable"
  >;

  weighMessage: TypedContractMethod<
    [message: BytesLike],
    [IXcm.WeightStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "execute",
  ): TypedContractMethod<
    [message: BytesLike, weight: IXcm.WeightStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "send",
  ): TypedContractMethod<
    [destination: BytesLike, message: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "weighMessage",
  ): TypedContractMethod<
    [message: BytesLike],
    [IXcm.WeightStructOutput],
    "view"
  >;

  filters: {};
}
